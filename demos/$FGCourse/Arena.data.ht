type: "$Scene/types/Scene"
data: {
	// array of SceneEntities - this looks suspiciously similar to an AssetTree.
	// Maybe we should have a "ItemTree" be a built-in type. What does a data tree look like then?
	// A data tree is like an asset tree, where each item is a struct instance with an unique name/path.
	// Items may be parented to other items.
	// But before an ItemTree, we can get the main benefits as ItemList and just having a flat hierarchy.
	
	// entities: @ItemList "$Scene/types/SceneEntity"
	entities: {
		"Terrain": {
			position: { 0, 0, 0 }
			rotation: { 0, 0, 0 }
			scale:    { 1, 1, 1 }
			components: {
				@Type("$Scene/components/MeshComponent") {
					mesh: "Meshes/Terrain"
					color_texture: "Textures/Grass_01"
				}
			}
		}
		"Monkey": {
			position: { 0, 0, 10}
			rotation: { 0, 0, 0 }
			scale:    { 1, 1, 1 }
			components: {
				@Type("$Scene/components/BoxComponent") {}
				@Type("$Scene/components/MeshComponent") {
					mesh: "Meshes/UnitBox"
					color_texture: "Textures/cockdragon"
				}
				@Type("$JoltPhysics/components/PhysicsBodyComponent") {
					enabled: true
				}
			}
		}
		"Torus": {
			position: { 0, 0.5, 4 }
			rotation: { 0, 0, 0 }
			scale:    { 1, 1, 1 }
			components: {
				@Type("$Scene/components/BoxComponent") {}
				@Type("$Scene/components/MeshComponent") {
					mesh: "Meshes/UnitBox"
					color_texture: "Textures/cockdragon"
				}
				@Type("$JoltPhysics/components/PhysicsBodyComponent") {
					enabled: true
				}
			}
		}
	}
	extended_data: {
		@Type("$SceneEdit/EditorCamera") {
			position: { -10, 0, 5 }
			pitch: 0
			yaw: 0
		}
	}
}